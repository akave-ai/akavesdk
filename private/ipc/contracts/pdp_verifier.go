// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CidsCid is an auto generated low-level Go binding around an user-defined struct.
type CidsCid struct {
	Data []byte
}

// PDPVerifierProof is an auto generated low-level Go binding around an user-defined struct.
type PDPVerifierProof struct {
	Leaf  [32]byte
	Proof [][32]byte
}

// PDPVerifierRootData is an auto generated low-level Go binding around an user-defined struct.
type PDPVerifierRootData struct {
	Root    CidsCid
	RawSize *big.Int
}

// PDPVerifierRootIdAndOffset is an auto generated low-level Go binding around an user-defined struct.
type PDPVerifierRootIdAndOffset struct {
	RootId *big.Int
	Offset *big.Int
}

// PDPVerifierMetaData contains all meta data concerning the PDPVerifier contract.
var PDPVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeFinality\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"IndexedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leafCount\",\"type\":\"uint256\"}],\"name\":\"NextProvingPeriod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structPDPVerifier.RootIdAndOffset[]\",\"name\":\"challenges\",\"type\":\"tuple[]\"}],\"name\":\"PossessionProven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"}],\"name\":\"ProofFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProofSetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deletedLeafCount\",\"type\":\"uint256\"}],\"name\":\"ProofSetDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"ProofSetEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProofSetOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rootIds\",\"type\":\"uint256[]\"}],\"name\":\"RootsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rootIds\",\"type\":\"uint256[]\"}],\"name\":\"RootsRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXTRA_DATA_MAX_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEAF_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ENQUEUED_REMOVALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ROOT_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_CHALLENGE_SCHEDULED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_PROVEN_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOMNESS_PRECOMPILE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structCids.Cid\",\"name\":\"root\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rawSize\",\"type\":\"uint256\"}],\"internalType\":\"structPDPVerifier.RootData[]\",\"name\":\"rootData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"addRoots\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"claimProofSetOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listenerAddr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"createProofSet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"deleteProofSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"leafIndexs\",\"type\":\"uint256[]\"}],\"name\":\"findRootIds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"internalType\":\"structPDPVerifier.RootIdAndOffset[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChallengeFinality\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getChallengeRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getNextChallengeEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextProofSetId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getNextRootId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getProofSetLastProvenEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getProofSetLeafCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getProofSetListener\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getProofSetOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"getRandomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"}],\"name\":\"getRootCid\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structCids.Cid\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"}],\"name\":\"getRootLeafCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"getScheduledRemovals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"}],\"name\":\"getSumTreeCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"heightFromIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"heightOfTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[][]\",\"name\":\"tree\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256\",\"name\":\"leafCount\",\"type\":\"uint256\"}],\"name\":\"makeRoot\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structCids.Cid\",\"name\":\"root\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rawSize\",\"type\":\"uint256\"}],\"internalType\":\"structPDPVerifier.RootData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challengeEpoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"nextProvingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"proofSetLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"proposeProofSetOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"structPDPVerifier.Proof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"provePossession\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"}],\"name\":\"rootChallengable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rootId\",\"type\":\"uint256\"}],\"name\":\"rootLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rootIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"scheduleRemovals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sumTreeCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052348015600e575f5ffd5b50604051613bc9380380613bc9833981016040819052602b9160ad565b3380604f57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b605681605e565b5060015560c3565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6020828403121560bc575f5ffd5b5051919050565b613af9806100d05f395ff3fe60806040526004361061023e575f3560e01c806371cf2a16116101345780639f8cb3bd116100b3578063f178b1be11610078578063f178b1be146103db578063f2fde38b146106ec578063f58f952b1461070b578063f5cac1ba1461071e578063f83758fe1461073d578063faa6716314610751575f5ffd5b80639f8cb3bd1461064f578063c0e1594914610664578063cbb147cd14610678578063d49245c1146106ae578063ee3dac65146106cd575f5ffd5b80638d101c68116100f95780638d101c68146105985780638da5cb5b146105b75780638ea417e5146105d35780639153e64b146105fa5780639a9a330f14610619575f5ffd5b806371cf2a16146104f0578063831604e11461050f578063847d1d061461053b578063869888841461055a57806389208ba914610579575f5ffd5b8063453f4f62116101c057806361a52a361161018557806361a52a361461045c5780636ba4608f146104725780636cb55c16146104915780636fa44692146104b0578063715018a6146104dc575f5ffd5b8063453f4f621461039f57806345c0b92d146103bc578063462dd449146103db5780634726075b146103ee578063473310501461042d575f5ffd5b806316e2bcd51161020657806316e2bcd5146102fa57806331601226146103145780633b68e4e9146103335780633b7ae913146103545780633f84135f14610380575f5ffd5b8063029b4646146102425780630528a55b1461026a5780630a4d79321461029657806311c0ee4a146102a957806315b17570146102c8575b5f5ffd5b34801561024d575f5ffd5b5061025761080081565b6040519081526020015b60405180910390f35b348015610275575f5ffd5b50610289610284366004613022565b610770565b6040516102619190613069565b6102576102a436600461310f565b610857565b3480156102b4575f5ffd5b506102576102c3366004613150565b610a47565b3480156102d3575f5ffd5b506102e26006607f60991b0181565b6040516001600160a01b039091168152602001610261565b348015610305575f5ffd5b50610257660400000000000081565b34801561031f575f5ffd5b506102e261032e3660046131c7565b610cf5565b34801561033e575f5ffd5b5061035261034d366004613150565b610d36565b005b34801561035f575f5ffd5b5061037361036e3660046131de565b610fe9565b6040516102619190613236565b34801561038b575f5ffd5b5061025761039a3660046131c7565b6110d9565b3480156103aa575f5ffd5b506102576103b93660046131c7565b90565b3480156103c7575f5ffd5b506103526103d6366004613248565b611111565b3480156103e6575f5ffd5b506102575f81565b3480156103f9575f5ffd5b5061040d6104083660046131c7565b61150c565b604080516001600160a01b03938416815292909116602083015201610261565b348015610438575f5ffd5b5061044c6104473660046131de565b611560565b6040519015158152602001610261565b348015610467575f5ffd5b506102576201518081565b34801561047d575f5ffd5b5061025761048c3660046131c7565b6115a8565b34801561049c575f5ffd5b506103526104ab366004613296565b6115e0565b3480156104bb575f5ffd5b506104cf6104ca3660046131c7565b6116e6565b60405161026191906132c0565b3480156104e7575f5ffd5b506103526117b5565b3480156104fb575f5ffd5b5061044c61050a3660046131de565b6117c8565b34801561051a575f5ffd5b5061052e61052936600461335d565b6118da565b6040516102619190613476565b348015610546575f5ffd5b506103526105553660046134a7565b611976565b348015610565575f5ffd5b506102576105743660046131c7565b611b5b565b348015610584575f5ffd5b506102576105933660046131c7565b611b6f565b3480156105a3575f5ffd5b506102576105b23660046131c7565b611ba7565b3480156105c2575f5ffd5b505f546001600160a01b03166102e2565b3480156105de575f5ffd5b506002546040516001600160401b039091168152602001610261565b348015610605575f5ffd5b506102576106143660046131de565b611bca565b348015610624575f5ffd5b506102576106333660046131de565b600560209081525f928352604080842090915290825290205481565b34801561065a575f5ffd5b506102576107d081565b34801561066f575f5ffd5b50610257602081565b348015610683575f5ffd5b506102576106923660046131de565b5f91825260056020908152604080842092845291905290205490565b3480156106b9575f5ffd5b506102576106c83660046131c7565b611c0d565b3480156106d8575f5ffd5b506103526106e73660046131c7565b611c45565b3480156106f7575f5ffd5b506103526107063660046134d5565b611d50565b610352610719366004613022565b611d8d565b348015610729575f5ffd5b5061044c6107383660046131c7565b612269565b348015610748575f5ffd5b50600154610257565b34801561075c575f5ffd5b5061025761076b3660046131c7565b61229d565b5f838152600660205260408120546060919061078b906122d5565b61079790610100613502565b90505f836001600160401b038111156107b2576107b26132f7565b6040519080825280602002602001820160405280156107f657816020015b604080518082019091525f80825260208201528152602001906001900390816107d05790505b5090505f5b8481101561084b576108268787878481811061081957610819613515565b90506020020135856123cc565b82828151811061083857610838613515565b60209081029190910101526001016107fb565b509150505b9392505050565b5f6108008211156108835760405162461bcd60e51b815260040161087a90613529565b60405180910390fd5b5f61088c6125ac565b9050803410156108d25760405162461bcd60e51b81526020600482015260116024820152701cde589a5b08199959481b9bdd081b595d607a1b604482015260640161087a565b8034111561090f57336108fc6108e88334613502565b6040518115909202915f818181858888f1935050505015801561090d573d5f5f3e3d5ffd5b505b600280545f916001600160401b03909116908261092b83613557565b82546001600160401b039182166101009390930a928302928202191691909117909155165f81815260076020908152604080832083905560088252808320839055600c825280832080546001600160a01b031990811633179091556009835281842080546001600160a01b038d16921682179055600e90925282209190915590915015610a1257604051634a6a0d9b60e11b81526001600160a01b038716906394d41b36906109e490849033908a908a906004016135a9565b5f604051808303815f87803b1580156109fb575f5ffd5b505af1158015610a0d573d5f5f3e3d5ffd5b505050505b604051339082907f017f0b33d96e8f9968590172013032c2346cf047787a5e17a44b0a1bb3cd0f01905f90a395945050505050565b5f610800821115610a6a5760405162461bcd60e51b815260040161087a90613529565b610a7386612269565b610a8f5760405162461bcd60e51b815260040161087a906135dd565b83610adc5760405162461bcd60e51b815260206004820152601a60248201527f4d75737420616464206174206c65617374206f6e6520726f6f74000000000000604482015260640161087a565b5f868152600c60205260409020546001600160a01b03163314610b415760405162461bcd60e51b815260206004820152601c60248201527f4f6e6c7920746865206f776e65722063616e2061646420726f6f747300000000604482015260640161087a565b5f8681526006602052604081205490856001600160401b03811115610b6857610b686132f7565b604051908082528060200260200182016040528015610b91578160200160208202803683370190505b5090505f5b86811015610c2e57610bfe89828a8a85818110610bb557610bb5613515565b9050602002810190610bc79190613609565b610bd19080613627565b8b8b86818110610be357610be3613515565b9050602002810190610bf59190613609565b602001356125d1565b50610c09818461363b565b828281518110610c1b57610c1b613515565b6020908102919091010152600101610b96565b50877f5ce51a8003915c377679ba533d9dafa0792058b254965697e674272f13f4fdd382604051610c5f91906132c0565b60405180910390a25f888152600960205260409020546001600160a01b03168015610ce8576040516312d5d66f60e01b81526001600160a01b038216906312d5d66f90610cba908c9087908d908d908d908d9060040161364e565b5f604051808303815f87803b158015610cd1575f5ffd5b505af1158015610ce3573d5f5f3e3d5ffd5b505050505b5090979650505050505050565b5f610cff82612269565b610d1b5760405162461bcd60e51b815260040161087a906135dd565b505f908152600960205260409020546001600160a01b031690565b610800811115610d585760405162461bcd60e51b815260040161087a90613529565b610d6185612269565b610d7d5760405162461bcd60e51b815260040161087a906135dd565b5f858152600c60205260409020546001600160a01b03163314610df75760405162461bcd60e51b815260206004820152602c60248201527f4f6e6c7920746865206f776e65722063616e207363686564756c652072656d6f60448201526b76616c206f6620726f6f747360a01b606482015260840161087a565b5f858152600b60205260409020546107d090610e13908561363b565b1115610e875760405162461bcd60e51b815260206004820152603a60248201527f546f6f206d616e792072656d6f76616c73207761697420666f72206e6578742060448201527f70726f76696e6720706572696f6420746f207363686564756c65000000000000606482015260840161087a565b5f5b83811015610f61575f86815260066020526040902054858583818110610eb157610eb1613515565b9050602002013510610f195760405162461bcd60e51b815260206004820152602b60248201527f43616e206f6e6c79207363686564756c652072656d6f76616c206f662065786960448201526a7374696e6720726f6f747360a81b606482015260840161087a565b5f868152600b60205260409020858583818110610f3857610f38613515565b8354600180820186555f9586526020958690209290950293909301359201919091555001610e89565b505f858152600960205260409020546001600160a01b03168015610fe15760405163257be8e960e11b81526001600160a01b03821690634af7d1d290610fb39089908990899089908990600401613755565b5f604051808303815f87803b158015610fca575f5ffd5b505af1158015610fdc573d5f5f3e3d5ffd5b505050505b505050505050565b60408051602081019091526060815261100183612269565b61101d5760405162461bcd60e51b815260040161087a906135dd565b5f8381526003602090815260408083208584528252918290208251918201909252815490919082908290611050906137ad565b80601f016020809104026020016040519081016040528092919081815260200182805461107c906137ad565b80156110c75780601f1061109e576101008083540402835291602001916110c7565b820191905f5260205f20905b8154815290600101906020018083116110aa57829003601f168201915b50505050508152505090505b92915050565b5f6110e382612269565b6110ff5760405162461bcd60e51b815260040161087a906135dd565b505f9081526007602052604090205490565b6108008111156111335760405162461bcd60e51b815260040161087a90613529565b5f848152600c60205260409020546001600160a01b031633146111685760405162461bcd60e51b815260040161087a906137e5565b5f848152600760205260409020546111d75760405162461bcd60e51b815260206004820152602c60248201527f63616e206f6e6c792073746172742070726f76696e67206f6e6365206c65617660448201526b195cc8185c9948185919195960a21b606482015260840161087a565b5f848152600e60205260409020546111fa575f848152600e602052604090204390555b5f848152600b6020526040812080549091906001600160401b03811115611223576112236132f7565b60405190808252806020026020018201604052801561124c578160200160208202803683370190505b5090505f5b81518110156112cf578254839061126a90600190613502565b8154811061127a5761127a613515565b905f5260205f20015482828151811061129557611295613515565b602002602001018181525050828054806112b1576112b1613833565b5f8281526020812082015f1990810191909155019055600101611251565b506112da8682612794565b857fd22bb0ee05b8ca92312459c76223d3b9bc1bd96fb6c9b18e637ededf92d811748260405161130a91906132c0565b60405180910390a25f86815260076020908152604080832054600a90925290912055600154611339904361363b565b8510156113be5760405162461bcd60e51b815260206004820152604760248201527f6368616c6c656e67652065706f6368206d757374206265206174206c6561737460448201527f206368616c6c656e676546696e616c6974792065706f63687320696e207468656064820152662066757475726560c81b608482015260a40161087a565b5f868152600860209081526040808320889055600790915281205490036114255760405186907f323c29bc8d678a5d987b90a321982d10b9a91bcad071a9e445879497bf0e68e7905f90a25f868152600e6020908152604080832083905560089091528120555b5f868152600960205260409020546001600160a01b031680156114bb575f87815260086020908152604080832054600790925291829020549151632a89faf360e21b81526001600160a01b0384169263aa27ebcc9261148d928c92908b908b90600401613847565b5f604051808303815f87803b1580156114a4575f5ffd5b505af11580156114b6573d5f5f3e3d5ffd5b505050505b5f878152600760209081526040918290205482518981529182015288917fc099ffec4e3e773644a4d1dda368c46af853a0eeb15babde217f53a657396e1e910160405180910390a250505050505050565b5f5f61151783612269565b6115335760405162461bcd60e51b815260040161087a906135dd565b50505f908152600c6020908152604080832054600d909252909120546001600160a01b0391821692911690565b5f61156a83612269565b801561158257505f8381526006602052604090205482105b80156108505750505f918252600460209081526040808420928452919052902054151590565b5f6115b282612269565b6115ce5760405162461bcd60e51b815260040161087a906135dd565b505f9081526008602052604090205490565b6115e982612269565b6116055760405162461bcd60e51b815260040161087a906135dd565b5f828152600c60205260409020546001600160a01b03163381146116825760405162461bcd60e51b815260206004820152602e60248201527f4f6e6c79207468652063757272656e74206f776e65722063616e2070726f706f60448201526d39b29030903732bb9037bbb732b960911b606482015260840161087a565b816001600160a01b0316816001600160a01b0316036116ba5750505f908152600d6020526040902080546001600160a01b0319169055565b5f838152600d6020526040902080546001600160a01b0319166001600160a01b0384161790555b505050565b60606116f182612269565b61170d5760405162461bcd60e51b815260040161087a906135dd565b5f828152600b6020526040812080549091906001600160401b03811115611736576117366132f7565b60405190808252806020026020018201604052801561175f578160200160208202803683370190505b5090505f5b82548110156117ad5782818154811061177f5761177f613515565b905f5260205f20015482828151811061179a5761179a613515565b6020908102919091010152600101611764565b509392505050565b6117bd612824565b6117c65f612850565b565b5f8281526006602052604081205481906117e1906122d5565b6117ed90610100613502565b5f858152600a60205260408120549192509061181790869061181190600190613502565b846123cc565b5f8681526004602090815260408083208451845290915290205490915061184090600190613502565b8160200151146118ba576040805162461bcd60e51b81526020600482015260248101919091527f6368616c6c656e676552616e6765202d312073686f756c6420616c69676e207760448201527f697468207468652076657279206c617374206c656166206f66206120726f6f74606482015260840161087a565b6118c48585611560565b80156118d1575080518411155b95945050505050565b60408051606080820183529181019182529081525f60208201525f6040518060400160405280600381526020016210d25160ea1b8152509050604051806040016040528061195a83875f8151811061193457611934613515565b60200260200101515f8151811061194d5761194d613515565b602002602001015161289f565b815260200184602061196c9190613877565b9052949350505050565b6108008111156119985760405162461bcd60e51b815260040161087a90613529565b6002546001600160401b031683106119f25760405162461bcd60e51b815260206004820152601a60248201527f70726f6f6620736574206964206f7574206f6620626f756e6473000000000000604482015260640161087a565b5f838152600c60205260409020546001600160a01b03163314611a635760405162461bcd60e51b8152602060048201526024808201527f4f6e6c7920746865206f776e65722063616e2064656c6574652070726f6f66206044820152637365747360e01b606482015260840161087a565b5f838152600760209081526040808320805490849055600c835281842080546001600160a01b031916905560088352818420849055600e83528184208490556009909252909120546001600160a01b03168015611b1a576040516326c249e360e01b81526001600160a01b038216906326c249e390611aec90889086908990899060040161388e565b5f604051808303815f87803b158015611b03575f5ffd5b505af1158015611b15573d5f5f3e3d5ffd5b505050505b847f589e9a441b5bddda77c4ab647b0108764a9cc1a7f655aa9b7bc50b8bdfab867383604051611b4c91815260200190565b60405180910390a25050505050565b5f6110d3611b6a83600161363b565b6129c5565b5f611b7982612269565b611b955760405162461bcd60e51b815260040161087a906135dd565b505f908152600a602052604090205490565b5f81815260066020526040812054611bbe906122d5565b6110d390610100613502565b5f611bd483612269565b611bf05760405162461bcd60e51b815260040161087a906135dd565b505f91825260046020908152604080842092845291905290205490565b5f611c1782612269565b611c335760405162461bcd60e51b815260040161087a906135dd565b505f9081526006602052604090205490565b611c4e81612269565b611c6a5760405162461bcd60e51b815260040161087a906135dd565b5f818152600d60205260409020546001600160a01b03163314611ce35760405162461bcd60e51b815260206004820152602b60248201527f4f6e6c79207468652070726f706f736564206f776e65722063616e20636c616960448201526a06d206f776e6572736869760ac1b606482015260840161087a565b5f818152600c602090815260408083208054336001600160a01b03198083168217909355600d909452828520805490921690915590516001600160a01b0390911692839185917fd3273037b635678293ef0c076bd77af13760e75e12806d1db237616d03c3a76691a45050565b611d58612824565b6001600160a01b038116611d8157604051631e4fbdf760e01b81525f600482015260240161087a565b611d8a81612850565b50565b5f5a5f858152600c60205260409020549091506001600160a01b03163314611dc75760405162461bcd60e51b815260040161087a906137e5565b5f8481526008602052604090205443811115611e175760405162461bcd60e51b815260206004820152600f60248201526e383932b6b0ba3ab93290383937b7b360891b604482015260640161087a565b82611e525760405162461bcd60e51b815260206004820152600b60248201526a32b6b83a3c90383937b7b360a91b604482015260640161087a565b80611e985760405162461bcd60e51b81526020600482015260166024820152751b9bc818da185b1b195b99d9481cd8da19591d5b195960521b604482015260640161087a565b5f836001600160401b03811115611eb157611eb16132f7565b604051908082528060200260200182016040528015611ef557816020015b604080518082019091525f8082526020820152815260200190600190039081611ecf5790505b5090505f611f0287612be5565b5f888152600a6020908152604080832054600690925282205492935091611f28906122d5565b611f3490610100613502565b90505f5b6001600160401b03811688111561213f5760408051602081018690529081018b90526001600160c01b031960c083901b1660608201525f9060680160405160208183030381529060405290505f8482805190602001205f1c611f9a91906138c1565b9050611fa78c82866123cc565b87846001600160401b031681518110611fc257611fc2613515565b60200260200101819052505f6120056120008e8a876001600160401b031681518110611ff057611ff0613515565b60200260200101515f0151610fe9565b612bf8565b90505f6120e28d8d876001600160401b031681811061202657612026613515565b90506020028101906120389190613609565b6120469060208101906138d4565b808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f82011690508083019250505050505050838f8f896001600160401b03168181106120a1576120a1613515565b90506020028101906120b39190613609565b5f01358c896001600160401b0316815181106120d1576120d1613515565b602002602001015160200151612ce2565b9050806121285760405162461bcd60e51b815260206004820152601460248201527370726f6f6620646964206e6f742076657269667960601b604482015260640161087a565b50505050808061213790613557565b915050611f38565b505f61214b8989612cf9565b61215690602061363b565b61216290610514613877565b5a61216d9089613502565b612177919061363b565b5f8b8152600960205260409020549091506001600160a01b03168015612212575f8b8152600760205260409081902054905163356de02b60e01b8152600481018d9052602481019190915260448101869052606481018a90526001600160a01b0382169063356de02b906084015f604051808303815f87803b1580156121fb575f5ffd5b505af115801561220d573d5f5f3e3d5ffd5b505050505b5f8b8152600e602052604090819020439055518b907f1acf7df9f0c1b0208c23be6178950c0273f89b766805a2c0bd1e53d25c700e5090612254908990613069565b60405180910390a25050505050505050505050565b6002545f906001600160401b0316821080156110d35750505f908152600c60205260409020546001600160a01b0316151590565b5f6122a782612269565b6122c35760405162461bcd60e51b815260040161087a906135dd565b505f908152600e602052604090205490565b5f610100608083901c80156122f5576122ef608083613502565b91508093505b50604083901c80156123125761230c604083613502565b91508093505b50602083901c801561232f57612329602083613502565b91508093505b50601083901c801561234c57612346601083613502565b91508093505b50600883901c801561236957612363600883613502565b91508093505b50600483901c801561238657612380600483613502565b91508093505b50600283901c80156123a35761239d600283613502565b91508093505b50600183901c80156123c2576123ba600283613502565b949350505050565b6123ba8483613502565b604080518082019091525f80825260208201525f84815260076020526040902054831061243b5760405162461bcd60e51b815260206004820152601860248201527f4c65616620696e646578206f7574206f6620626f756e64730000000000000000604482015260640161087a565b5f612449600180851b613502565b90505f80845b8015612521575f88815260066020526040902054841061248957612474600182613502565b612482906001901b85613502565b935061250f565b5f8881526005602090815260408083208784529091529020546124ac908461363b565b91508682116124f3575f8881526005602090815260408083208784529091529020546124d8908461363b565b92506124e5600182613502565b612482906001901b8561363b565b6124fe600182613502565b61250c906001901b85613502565b93505b8061251981613919565b91505061244f565b505f878152600560209081526040808320868452909152902054612545908361363b565b9050858111612582576040518060400160405280846001612566919061363b565b81526020016125758389613502565b8152509350505050610850565b6040518060400160405280848152602001838861259f9190613502565b9052979650505050505050565b5f600a6125c26001670de0b6b3a7640000613877565b6125cc919061392e565b905090565b5f6125dd6020836138c1565b15612634578360405163c7b67cf360e01b815260040161087a918152604060208201819052601d908201527f53697a65206d7573742062652061206d756c7469706c65206f66203332000000606082015260800190565b815f0361268d578360405163c7b67cf360e01b815260040161087a918152604060208201819052601b908201527f53697a65206d7573742062652067726561746572207468616e20300000000000606082015260800190565b66040000000000008211156126ed578360405163c7b67cf360e01b815260040161087a91815260406020808301829052908201527f526f6f742073697a65206d757374206265206c657373207468616e20325e3530606082015260800190565b5f6126f960208461392e565b5f87815260066020526040812080549293509091908261271883613941565b919050559050612729878383612d62565b5f8781526003602090815260408083208484529091529020859061274d828261399d565b50505f878152600460209081526040808320848452825280832085905589835260079091528120805484929061278490849061363b565b9091555090979650505050505050565b61279d82612269565b6127b95760405162461bcd60e51b815260040161087a906135dd565b5f805b82518110156127fc576127e8848483815181106127db576127db613515565b6020026020010151612ddd565b6127f2908361363b565b91506001016127bc565b505f838152600760205260408120805483929061281a908490613502565b9091555050505050565b5f546001600160a01b031633146117c65760405163118cdaa760e01b815233600482015260240161087a565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805160208101909152606081525f835160206128bd919061363b565b6001600160401b038111156128d4576128d46132f7565b6040519080825280601f01601f1916602001820160405280156128fe576020820181803683370190505b5090505f5b84518110156129595784818151811061291e5761291e613515565b602001015160f81c60f81b82828151811061293b5761293b613515565b60200101906001600160f81b03191690815f1a905350600101612903565b505f5b60208110156129af57612970816008613877565b84901b82865183612981919061363b565b8151811061299157612991613515565b60200101906001600160f81b03191690815f1a90535060010161295c565b5060408051602081019091529081529392505050565b5f6001600160ff1b03821115612a285760405162461bcd60e51b815260206004820152602260248201527f496e7075742065786365656473206d6178696d756d20696e743235362076616c604482015261756560f01b606482015260840161087a565b6101005f612a3584613a86565b841690508015612a4d5781612a4981613919565b9250505b6fffffffffffffffffffffffffffffffff811615612a7357612a70608083613502565b91505b77ffffffffffffffff0000000000000000ffffffffffffffff811615612aa157612a9e604083613502565b91505b7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff811615612ad357612ad0602083613502565b91505b7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff811615612b0757612b04601083613502565b91505b7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff811615612b3c57612b39600883613502565b91505b7f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f811615612b7257612b6f600483613502565b91505b7f3333333333333333333333333333333333333333333333333333333333333333811615612ba857612ba5600283613502565b91505b7f5555555555555555555555555555555555555555555555555555555555555555811615612bde57612bdb600183613502565b91505b5092915050565b5f818152600860205260408120546110d3565b5f6020825f0151511015612c465760405162461bcd60e51b815260206004820152601560248201527410da590819185d18481a5cc81d1bdbc81cda1bdc9d605a1b604482015260640161087a565b6040805160208082528183019092525f916020820181803683370190505090505f5b6020811015612cd857835180518290612c8390602090613502565b612c8d919061363b565b81518110612c9d57612c9d613515565b602001015160f81c60f81b828281518110612cba57612cba613515565b60200101906001600160f81b03191690815f1a905350600101612c68565b5061085081613aa0565b5f83612cef868585612e43565b1495945050505050565b5f80805b838110156117ad57848482818110612d1757612d17613515565b9050602002810190612d299190613609565b612d379060208101906138d4565b612d4391506020613877565b612d4e90604061363b565b612d58908361363b565b9150600101612cfd565b805f612d6d82611b5b565b9050835f5b82811015612db9575f612d886001831b86613502565b5f898152600560209081526040808320848452909152902054909150612dae908461363b565b925050600101612d72565b505f9586526005602090815260408088209588529490529290942091909155505050565b5f828152600460209081526040808320848452909152812054612e01848483612ebd565b5f848152600460209081526040808320868452825280832083905586835260038252808320868452909152812090612e398282612f91565b5090949350505050565b5f82815b8551811015612eb4575f868281518110612e6357612e63613515565b60200260200101519050600285612e7a91906138c1565b5f03612e9157612e8a8382612f64565b9250612e9e565b612e9b8184612f64565b92505b612ea960028661392e565b945050600101612e47565b50949350505050565b5f83815260066020526040812054612ed4906122d5565b612ee090610100613502565b90505f612eec84611b5b565b90505b818111158015612f0b57505f8581526006602052604090205484105b15612f5d575f85815260056020908152604080832087845290915281208054859290612f38908490613502565b90915550612f4b90506001821b8561363b565b9350612f5684611b5b565b9050612eef565b5050505050565b5f61085083835f825f528160205260205f60405f60025afa612f84575f5ffd5b50505f5160c01916919050565b508054612f9d906137ad565b5f825580601f10612fac575050565b601f0160209004905f5260205f2090810190611d8a91905b80821115612fd7575f8155600101612fc4565b5090565b5f5f83601f840112612feb575f5ffd5b5081356001600160401b03811115613001575f5ffd5b6020830191508360208260051b850101111561301b575f5ffd5b9250929050565b5f5f5f60408486031215613034575f5ffd5b8335925060208401356001600160401b03811115613050575f5ffd5b61305c86828701612fdb565b9497909650939450505050565b602080825282518282018190525f918401906040840190835b818110156130ac578351805184526020908101518185015290930192604090920191600101613082565b509095945050505050565b80356001600160a01b03811681146130cd575f5ffd5b919050565b5f5f83601f8401126130e2575f5ffd5b5081356001600160401b038111156130f8575f5ffd5b60208301915083602082850101111561301b575f5ffd5b5f5f5f60408486031215613121575f5ffd5b61312a846130b7565b925060208401356001600160401b03811115613144575f5ffd5b61305c868287016130d2565b5f5f5f5f5f60608688031215613164575f5ffd5b8535945060208601356001600160401b03811115613180575f5ffd5b61318c88828901612fdb565b90955093505060408601356001600160401b038111156131aa575f5ffd5b6131b6888289016130d2565b969995985093965092949392505050565b5f602082840312156131d7575f5ffd5b5035919050565b5f5f604083850312156131ef575f5ffd5b50508035926020909101359150565b5f81516020845280518060208601528060208301604087015e5f604082870101526040601f19601f8301168601019250505092915050565b602081525f61085060208301846131fe565b5f5f5f5f6060858703121561325b575f5ffd5b843593506020850135925060408501356001600160401b0381111561327e575f5ffd5b61328a878288016130d2565b95989497509550505050565b5f5f604083850312156132a7575f5ffd5b823591506132b7602084016130b7565b90509250929050565b602080825282518282018190525f918401906040840190835b818110156130ac5783518352602093840193909201916001016132d9565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b0381118282101715613333576133336132f7565b604052919050565b5f6001600160401b03821115613353576133536132f7565b5060051b60200190565b5f5f6040838503121561336e575f5ffd5b82356001600160401b03811115613383575f5ffd5b8301601f81018513613393575f5ffd5b80356133a66133a18261333b565b61330b565b8082825260208201915060208360051b8501019250878311156133c7575f5ffd5b602084015b838110156134645780356001600160401b038111156133e9575f5ffd5b8501603f81018a136133f9575f5ffd5b602081013561340a6133a18261333b565b808282526020820191506020808460051b8601010192508c83111561342d575f5ffd5b6040840193505b8284101561344f578335825260209384019390910190613434565b865250506020938401939190910190506133cc565b50976020969096013596505050505050565b602081525f82516040602084015261349160608401826131fe565b9050602084015160408401528091505092915050565b5f5f5f604084860312156134b9575f5ffd5b8335925060208401356001600160401b03811115613144575f5ffd5b5f602082840312156134e5575f5ffd5b610850826130b7565b634e487b7160e01b5f52601160045260245ffd5b818103818111156110d3576110d36134ee565b634e487b7160e01b5f52603260045260245ffd5b6020808252601490820152734578747261206461746120746f6f206c6172676560601b604082015260600190565b5f6001600160401b0382166001600160401b038103613578576135786134ee565b60010192915050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b8481526001600160a01b03841660208201526060604082018190525f906135d39083018486613581565b9695505050505050565b60208082526012908201527150726f6f6620736574206e6f74206c69766560701b604082015260600190565b5f8235603e1983360301811261361d575f5ffd5b9190910192915050565b5f8235601e1983360301811261361d575f5ffd5b808201808211156110d3576110d36134ee565b5f60808201888352876020840152608060408401528086825260a08401905060a08760051b8501019150875f603e198a3603015b8982101561373157868503609f1901845282358181126136a0575f5ffd5b8b01803536829003601e190181126136b6575f5ffd5b604087528101803536829003601e190181126136d0575f5ffd5b016020810190356001600160401b038111156136ea575f5ffd5b8036038213156136f8575f5ffd5b6020604089015261370d606089018284613581565b60209384013598840198909852505093840193929092019160019190910190613682565b505050508281036060840152613748818587613581565b9998505050505050505050565b85815260606020820181905281018490525f6001600160fb1b0385111561377a575f5ffd5b8460051b808760808501378201828103608090810160408501526137a19082018587613581565b98975050505050505050565b600181811c908216806137c157607f821691505b6020821081036137df57634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252602e908201527f6f6e6c7920746865206f776e65722063616e206d6f766520746f206e6578742060408201526d1c1c9bdd9a5b99c81c195c9a5bd960921b606082015260800190565b634e487b7160e01b5f52603160045260245ffd5b858152846020820152836040820152608060608201525f61386c608083018486613581565b979650505050505050565b80820281158282048414176110d3576110d36134ee565b848152836020820152606060408201525f6135d3606083018486613581565b634e487b7160e01b5f52601260045260245ffd5b5f826138cf576138cf6138ad565b500690565b5f5f8335601e198436030181126138e9575f5ffd5b8301803591506001600160401b03821115613902575f5ffd5b6020019150600581901b360382131561301b575f5ffd5b5f81613927576139276134ee565b505f190190565b5f8261393c5761393c6138ad565b500490565b5f60018201613952576139526134ee565b5060010190565b601f8211156116e157805f5260205f20601f840160051c8101602085101561397e5750805b601f840160051c820191505b81811015612f5d575f815560010161398a565b8135601e198336030181126139b0575f5ffd5b820180356001600160401b03811180156139c8575f5ffd5b8136036020840113156139d9575f5ffd5b5f9050506139f1816139eb85546137ad565b85613959565b5f601f821160018114613a25575f8315613a0e5750838201602001355b5f19600385901b1c1916600184901b178555610fe1565b5f85815260208120601f198516915b82811015613a5657602085880181013583559485019460019092019101613a34565b5084821015613a75575f1960f88660031b161c19602085880101351681555b50505050600190811b019091555050565b5f600160ff1b8201613a9a57613a9a6134ee565b505f0390565b805160208083015191908110156137df575f1960209190910360031b1b1691905056fea26469706673582212206913204745829cc2205e71d52237a37774929c2a3aeed01003119152e563b44164736f6c634300081c0033",
}

// PDPVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use PDPVerifierMetaData.ABI instead.
var PDPVerifierABI = PDPVerifierMetaData.ABI

// PDPVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PDPVerifierMetaData.Bin instead.
var PDPVerifierBin = PDPVerifierMetaData.Bin

// DeployPDPVerifier deploys a new Ethereum contract, binding an instance of PDPVerifier to it.
func DeployPDPVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _challengeFinality *big.Int) (common.Address, *types.Transaction, *PDPVerifier, error) {
	parsed, err := PDPVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PDPVerifierBin), backend, _challengeFinality)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PDPVerifier{PDPVerifierCaller: PDPVerifierCaller{contract: contract}, PDPVerifierTransactor: PDPVerifierTransactor{contract: contract}, PDPVerifierFilterer: PDPVerifierFilterer{contract: contract}}, nil
}

// PDPVerifier is an auto generated Go binding around an Ethereum contract.
type PDPVerifier struct {
	PDPVerifierCaller     // Read-only binding to the contract
	PDPVerifierTransactor // Write-only binding to the contract
	PDPVerifierFilterer   // Log filterer for contract events
}

// PDPVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type PDPVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PDPVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PDPVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PDPVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PDPVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PDPVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PDPVerifierSession struct {
	Contract     *PDPVerifier      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PDPVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PDPVerifierCallerSession struct {
	Contract *PDPVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// PDPVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PDPVerifierTransactorSession struct {
	Contract     *PDPVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// PDPVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type PDPVerifierRaw struct {
	Contract *PDPVerifier // Generic contract binding to access the raw methods on
}

// PDPVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PDPVerifierCallerRaw struct {
	Contract *PDPVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// PDPVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PDPVerifierTransactorRaw struct {
	Contract *PDPVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPDPVerifier creates a new instance of PDPVerifier, bound to a specific deployed contract.
func NewPDPVerifier(address common.Address, backend bind.ContractBackend) (*PDPVerifier, error) {
	contract, err := bindPDPVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PDPVerifier{PDPVerifierCaller: PDPVerifierCaller{contract: contract}, PDPVerifierTransactor: PDPVerifierTransactor{contract: contract}, PDPVerifierFilterer: PDPVerifierFilterer{contract: contract}}, nil
}

// NewPDPVerifierCaller creates a new read-only instance of PDPVerifier, bound to a specific deployed contract.
func NewPDPVerifierCaller(address common.Address, caller bind.ContractCaller) (*PDPVerifierCaller, error) {
	contract, err := bindPDPVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierCaller{contract: contract}, nil
}

// NewPDPVerifierTransactor creates a new write-only instance of PDPVerifier, bound to a specific deployed contract.
func NewPDPVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*PDPVerifierTransactor, error) {
	contract, err := bindPDPVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierTransactor{contract: contract}, nil
}

// NewPDPVerifierFilterer creates a new log filterer instance of PDPVerifier, bound to a specific deployed contract.
func NewPDPVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*PDPVerifierFilterer, error) {
	contract, err := bindPDPVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierFilterer{contract: contract}, nil
}

// bindPDPVerifier binds a generic wrapper to an already deployed contract.
func bindPDPVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PDPVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PDPVerifier *PDPVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PDPVerifier.Contract.PDPVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PDPVerifier *PDPVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PDPVerifier.Contract.PDPVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PDPVerifier *PDPVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PDPVerifier.Contract.PDPVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PDPVerifier *PDPVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PDPVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PDPVerifier *PDPVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PDPVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PDPVerifier *PDPVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PDPVerifier.Contract.contract.Transact(opts, method, params...)
}

// EXTRADATAMAXSIZE is a free data retrieval call binding the contract method 0x029b4646.
//
// Solidity: function EXTRA_DATA_MAX_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) EXTRADATAMAXSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "EXTRA_DATA_MAX_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EXTRADATAMAXSIZE is a free data retrieval call binding the contract method 0x029b4646.
//
// Solidity: function EXTRA_DATA_MAX_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) EXTRADATAMAXSIZE() (*big.Int, error) {
	return _PDPVerifier.Contract.EXTRADATAMAXSIZE(&_PDPVerifier.CallOpts)
}

// EXTRADATAMAXSIZE is a free data retrieval call binding the contract method 0x029b4646.
//
// Solidity: function EXTRA_DATA_MAX_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) EXTRADATAMAXSIZE() (*big.Int, error) {
	return _PDPVerifier.Contract.EXTRADATAMAXSIZE(&_PDPVerifier.CallOpts)
}

// LEAFSIZE is a free data retrieval call binding the contract method 0xc0e15949.
//
// Solidity: function LEAF_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) LEAFSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "LEAF_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LEAFSIZE is a free data retrieval call binding the contract method 0xc0e15949.
//
// Solidity: function LEAF_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) LEAFSIZE() (*big.Int, error) {
	return _PDPVerifier.Contract.LEAFSIZE(&_PDPVerifier.CallOpts)
}

// LEAFSIZE is a free data retrieval call binding the contract method 0xc0e15949.
//
// Solidity: function LEAF_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) LEAFSIZE() (*big.Int, error) {
	return _PDPVerifier.Contract.LEAFSIZE(&_PDPVerifier.CallOpts)
}

// MAXENQUEUEDREMOVALS is a free data retrieval call binding the contract method 0x9f8cb3bd.
//
// Solidity: function MAX_ENQUEUED_REMOVALS() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) MAXENQUEUEDREMOVALS(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "MAX_ENQUEUED_REMOVALS")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXENQUEUEDREMOVALS is a free data retrieval call binding the contract method 0x9f8cb3bd.
//
// Solidity: function MAX_ENQUEUED_REMOVALS() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) MAXENQUEUEDREMOVALS() (*big.Int, error) {
	return _PDPVerifier.Contract.MAXENQUEUEDREMOVALS(&_PDPVerifier.CallOpts)
}

// MAXENQUEUEDREMOVALS is a free data retrieval call binding the contract method 0x9f8cb3bd.
//
// Solidity: function MAX_ENQUEUED_REMOVALS() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) MAXENQUEUEDREMOVALS() (*big.Int, error) {
	return _PDPVerifier.Contract.MAXENQUEUEDREMOVALS(&_PDPVerifier.CallOpts)
}

// MAXROOTSIZE is a free data retrieval call binding the contract method 0x16e2bcd5.
//
// Solidity: function MAX_ROOT_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) MAXROOTSIZE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "MAX_ROOT_SIZE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXROOTSIZE is a free data retrieval call binding the contract method 0x16e2bcd5.
//
// Solidity: function MAX_ROOT_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) MAXROOTSIZE() (*big.Int, error) {
	return _PDPVerifier.Contract.MAXROOTSIZE(&_PDPVerifier.CallOpts)
}

// MAXROOTSIZE is a free data retrieval call binding the contract method 0x16e2bcd5.
//
// Solidity: function MAX_ROOT_SIZE() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) MAXROOTSIZE() (*big.Int, error) {
	return _PDPVerifier.Contract.MAXROOTSIZE(&_PDPVerifier.CallOpts)
}

// NOCHALLENGESCHEDULED is a free data retrieval call binding the contract method 0x462dd449.
//
// Solidity: function NO_CHALLENGE_SCHEDULED() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) NOCHALLENGESCHEDULED(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "NO_CHALLENGE_SCHEDULED")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NOCHALLENGESCHEDULED is a free data retrieval call binding the contract method 0x462dd449.
//
// Solidity: function NO_CHALLENGE_SCHEDULED() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) NOCHALLENGESCHEDULED() (*big.Int, error) {
	return _PDPVerifier.Contract.NOCHALLENGESCHEDULED(&_PDPVerifier.CallOpts)
}

// NOCHALLENGESCHEDULED is a free data retrieval call binding the contract method 0x462dd449.
//
// Solidity: function NO_CHALLENGE_SCHEDULED() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) NOCHALLENGESCHEDULED() (*big.Int, error) {
	return _PDPVerifier.Contract.NOCHALLENGESCHEDULED(&_PDPVerifier.CallOpts)
}

// NOPROVENEPOCH is a free data retrieval call binding the contract method 0xf178b1be.
//
// Solidity: function NO_PROVEN_EPOCH() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) NOPROVENEPOCH(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "NO_PROVEN_EPOCH")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NOPROVENEPOCH is a free data retrieval call binding the contract method 0xf178b1be.
//
// Solidity: function NO_PROVEN_EPOCH() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) NOPROVENEPOCH() (*big.Int, error) {
	return _PDPVerifier.Contract.NOPROVENEPOCH(&_PDPVerifier.CallOpts)
}

// NOPROVENEPOCH is a free data retrieval call binding the contract method 0xf178b1be.
//
// Solidity: function NO_PROVEN_EPOCH() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) NOPROVENEPOCH() (*big.Int, error) {
	return _PDPVerifier.Contract.NOPROVENEPOCH(&_PDPVerifier.CallOpts)
}

// RANDOMNESSPRECOMPILE is a free data retrieval call binding the contract method 0x15b17570.
//
// Solidity: function RANDOMNESS_PRECOMPILE() view returns(address)
func (_PDPVerifier *PDPVerifierCaller) RANDOMNESSPRECOMPILE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "RANDOMNESS_PRECOMPILE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RANDOMNESSPRECOMPILE is a free data retrieval call binding the contract method 0x15b17570.
//
// Solidity: function RANDOMNESS_PRECOMPILE() view returns(address)
func (_PDPVerifier *PDPVerifierSession) RANDOMNESSPRECOMPILE() (common.Address, error) {
	return _PDPVerifier.Contract.RANDOMNESSPRECOMPILE(&_PDPVerifier.CallOpts)
}

// RANDOMNESSPRECOMPILE is a free data retrieval call binding the contract method 0x15b17570.
//
// Solidity: function RANDOMNESS_PRECOMPILE() view returns(address)
func (_PDPVerifier *PDPVerifierCallerSession) RANDOMNESSPRECOMPILE() (common.Address, error) {
	return _PDPVerifier.Contract.RANDOMNESSPRECOMPILE(&_PDPVerifier.CallOpts)
}

// SECONDSINDAY is a free data retrieval call binding the contract method 0x61a52a36.
//
// Solidity: function SECONDS_IN_DAY() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) SECONDSINDAY(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "SECONDS_IN_DAY")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SECONDSINDAY is a free data retrieval call binding the contract method 0x61a52a36.
//
// Solidity: function SECONDS_IN_DAY() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) SECONDSINDAY() (*big.Int, error) {
	return _PDPVerifier.Contract.SECONDSINDAY(&_PDPVerifier.CallOpts)
}

// SECONDSINDAY is a free data retrieval call binding the contract method 0x61a52a36.
//
// Solidity: function SECONDS_IN_DAY() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) SECONDSINDAY() (*big.Int, error) {
	return _PDPVerifier.Contract.SECONDSINDAY(&_PDPVerifier.CallOpts)
}

// FindRootIds is a free data retrieval call binding the contract method 0x0528a55b.
//
// Solidity: function findRootIds(uint256 setId, uint256[] leafIndexs) view returns((uint256,uint256)[])
func (_PDPVerifier *PDPVerifierCaller) FindRootIds(opts *bind.CallOpts, setId *big.Int, leafIndexs []*big.Int) ([]PDPVerifierRootIdAndOffset, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "findRootIds", setId, leafIndexs)

	if err != nil {
		return *new([]PDPVerifierRootIdAndOffset), err
	}

	out0 := *abi.ConvertType(out[0], new([]PDPVerifierRootIdAndOffset)).(*[]PDPVerifierRootIdAndOffset)

	return out0, err

}

// FindRootIds is a free data retrieval call binding the contract method 0x0528a55b.
//
// Solidity: function findRootIds(uint256 setId, uint256[] leafIndexs) view returns((uint256,uint256)[])
func (_PDPVerifier *PDPVerifierSession) FindRootIds(setId *big.Int, leafIndexs []*big.Int) ([]PDPVerifierRootIdAndOffset, error) {
	return _PDPVerifier.Contract.FindRootIds(&_PDPVerifier.CallOpts, setId, leafIndexs)
}

// FindRootIds is a free data retrieval call binding the contract method 0x0528a55b.
//
// Solidity: function findRootIds(uint256 setId, uint256[] leafIndexs) view returns((uint256,uint256)[])
func (_PDPVerifier *PDPVerifierCallerSession) FindRootIds(setId *big.Int, leafIndexs []*big.Int) ([]PDPVerifierRootIdAndOffset, error) {
	return _PDPVerifier.Contract.FindRootIds(&_PDPVerifier.CallOpts, setId, leafIndexs)
}

// GetChallengeFinality is a free data retrieval call binding the contract method 0xf83758fe.
//
// Solidity: function getChallengeFinality() view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetChallengeFinality(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getChallengeFinality")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChallengeFinality is a free data retrieval call binding the contract method 0xf83758fe.
//
// Solidity: function getChallengeFinality() view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetChallengeFinality() (*big.Int, error) {
	return _PDPVerifier.Contract.GetChallengeFinality(&_PDPVerifier.CallOpts)
}

// GetChallengeFinality is a free data retrieval call binding the contract method 0xf83758fe.
//
// Solidity: function getChallengeFinality() view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetChallengeFinality() (*big.Int, error) {
	return _PDPVerifier.Contract.GetChallengeFinality(&_PDPVerifier.CallOpts)
}

// GetChallengeRange is a free data retrieval call binding the contract method 0x89208ba9.
//
// Solidity: function getChallengeRange(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetChallengeRange(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getChallengeRange", setId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChallengeRange is a free data retrieval call binding the contract method 0x89208ba9.
//
// Solidity: function getChallengeRange(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetChallengeRange(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetChallengeRange(&_PDPVerifier.CallOpts, setId)
}

// GetChallengeRange is a free data retrieval call binding the contract method 0x89208ba9.
//
// Solidity: function getChallengeRange(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetChallengeRange(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetChallengeRange(&_PDPVerifier.CallOpts, setId)
}

// GetNextChallengeEpoch is a free data retrieval call binding the contract method 0x6ba4608f.
//
// Solidity: function getNextChallengeEpoch(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetNextChallengeEpoch(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getNextChallengeEpoch", setId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNextChallengeEpoch is a free data retrieval call binding the contract method 0x6ba4608f.
//
// Solidity: function getNextChallengeEpoch(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetNextChallengeEpoch(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetNextChallengeEpoch(&_PDPVerifier.CallOpts, setId)
}

// GetNextChallengeEpoch is a free data retrieval call binding the contract method 0x6ba4608f.
//
// Solidity: function getNextChallengeEpoch(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetNextChallengeEpoch(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetNextChallengeEpoch(&_PDPVerifier.CallOpts, setId)
}

// GetNextProofSetId is a free data retrieval call binding the contract method 0x8ea417e5.
//
// Solidity: function getNextProofSetId() view returns(uint64)
func (_PDPVerifier *PDPVerifierCaller) GetNextProofSetId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getNextProofSetId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// GetNextProofSetId is a free data retrieval call binding the contract method 0x8ea417e5.
//
// Solidity: function getNextProofSetId() view returns(uint64)
func (_PDPVerifier *PDPVerifierSession) GetNextProofSetId() (uint64, error) {
	return _PDPVerifier.Contract.GetNextProofSetId(&_PDPVerifier.CallOpts)
}

// GetNextProofSetId is a free data retrieval call binding the contract method 0x8ea417e5.
//
// Solidity: function getNextProofSetId() view returns(uint64)
func (_PDPVerifier *PDPVerifierCallerSession) GetNextProofSetId() (uint64, error) {
	return _PDPVerifier.Contract.GetNextProofSetId(&_PDPVerifier.CallOpts)
}

// GetNextRootId is a free data retrieval call binding the contract method 0xd49245c1.
//
// Solidity: function getNextRootId(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetNextRootId(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getNextRootId", setId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNextRootId is a free data retrieval call binding the contract method 0xd49245c1.
//
// Solidity: function getNextRootId(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetNextRootId(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetNextRootId(&_PDPVerifier.CallOpts, setId)
}

// GetNextRootId is a free data retrieval call binding the contract method 0xd49245c1.
//
// Solidity: function getNextRootId(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetNextRootId(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetNextRootId(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetLastProvenEpoch is a free data retrieval call binding the contract method 0xfaa67163.
//
// Solidity: function getProofSetLastProvenEpoch(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetProofSetLastProvenEpoch(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getProofSetLastProvenEpoch", setId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProofSetLastProvenEpoch is a free data retrieval call binding the contract method 0xfaa67163.
//
// Solidity: function getProofSetLastProvenEpoch(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetProofSetLastProvenEpoch(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetProofSetLastProvenEpoch(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetLastProvenEpoch is a free data retrieval call binding the contract method 0xfaa67163.
//
// Solidity: function getProofSetLastProvenEpoch(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetProofSetLastProvenEpoch(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetProofSetLastProvenEpoch(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetLeafCount is a free data retrieval call binding the contract method 0x3f84135f.
//
// Solidity: function getProofSetLeafCount(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetProofSetLeafCount(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getProofSetLeafCount", setId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProofSetLeafCount is a free data retrieval call binding the contract method 0x3f84135f.
//
// Solidity: function getProofSetLeafCount(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetProofSetLeafCount(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetProofSetLeafCount(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetLeafCount is a free data retrieval call binding the contract method 0x3f84135f.
//
// Solidity: function getProofSetLeafCount(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetProofSetLeafCount(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetProofSetLeafCount(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetListener is a free data retrieval call binding the contract method 0x31601226.
//
// Solidity: function getProofSetListener(uint256 setId) view returns(address)
func (_PDPVerifier *PDPVerifierCaller) GetProofSetListener(opts *bind.CallOpts, setId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getProofSetListener", setId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetProofSetListener is a free data retrieval call binding the contract method 0x31601226.
//
// Solidity: function getProofSetListener(uint256 setId) view returns(address)
func (_PDPVerifier *PDPVerifierSession) GetProofSetListener(setId *big.Int) (common.Address, error) {
	return _PDPVerifier.Contract.GetProofSetListener(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetListener is a free data retrieval call binding the contract method 0x31601226.
//
// Solidity: function getProofSetListener(uint256 setId) view returns(address)
func (_PDPVerifier *PDPVerifierCallerSession) GetProofSetListener(setId *big.Int) (common.Address, error) {
	return _PDPVerifier.Contract.GetProofSetListener(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetOwner is a free data retrieval call binding the contract method 0x4726075b.
//
// Solidity: function getProofSetOwner(uint256 setId) view returns(address, address)
func (_PDPVerifier *PDPVerifierCaller) GetProofSetOwner(opts *bind.CallOpts, setId *big.Int) (common.Address, common.Address, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getProofSetOwner", setId)

	if err != nil {
		return *new(common.Address), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return out0, out1, err

}

// GetProofSetOwner is a free data retrieval call binding the contract method 0x4726075b.
//
// Solidity: function getProofSetOwner(uint256 setId) view returns(address, address)
func (_PDPVerifier *PDPVerifierSession) GetProofSetOwner(setId *big.Int) (common.Address, common.Address, error) {
	return _PDPVerifier.Contract.GetProofSetOwner(&_PDPVerifier.CallOpts, setId)
}

// GetProofSetOwner is a free data retrieval call binding the contract method 0x4726075b.
//
// Solidity: function getProofSetOwner(uint256 setId) view returns(address, address)
func (_PDPVerifier *PDPVerifierCallerSession) GetProofSetOwner(setId *big.Int) (common.Address, common.Address, error) {
	return _PDPVerifier.Contract.GetProofSetOwner(&_PDPVerifier.CallOpts, setId)
}

// GetRandomness is a free data retrieval call binding the contract method 0x453f4f62.
//
// Solidity: function getRandomness(uint256 epoch) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetRandomness(opts *bind.CallOpts, epoch *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getRandomness", epoch)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRandomness is a free data retrieval call binding the contract method 0x453f4f62.
//
// Solidity: function getRandomness(uint256 epoch) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetRandomness(epoch *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetRandomness(&_PDPVerifier.CallOpts, epoch)
}

// GetRandomness is a free data retrieval call binding the contract method 0x453f4f62.
//
// Solidity: function getRandomness(uint256 epoch) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetRandomness(epoch *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetRandomness(&_PDPVerifier.CallOpts, epoch)
}

// GetRootCid is a free data retrieval call binding the contract method 0x3b7ae913.
//
// Solidity: function getRootCid(uint256 setId, uint256 rootId) view returns((bytes))
func (_PDPVerifier *PDPVerifierCaller) GetRootCid(opts *bind.CallOpts, setId *big.Int, rootId *big.Int) (CidsCid, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getRootCid", setId, rootId)

	if err != nil {
		return *new(CidsCid), err
	}

	out0 := *abi.ConvertType(out[0], new(CidsCid)).(*CidsCid)

	return out0, err

}

// GetRootCid is a free data retrieval call binding the contract method 0x3b7ae913.
//
// Solidity: function getRootCid(uint256 setId, uint256 rootId) view returns((bytes))
func (_PDPVerifier *PDPVerifierSession) GetRootCid(setId *big.Int, rootId *big.Int) (CidsCid, error) {
	return _PDPVerifier.Contract.GetRootCid(&_PDPVerifier.CallOpts, setId, rootId)
}

// GetRootCid is a free data retrieval call binding the contract method 0x3b7ae913.
//
// Solidity: function getRootCid(uint256 setId, uint256 rootId) view returns((bytes))
func (_PDPVerifier *PDPVerifierCallerSession) GetRootCid(setId *big.Int, rootId *big.Int) (CidsCid, error) {
	return _PDPVerifier.Contract.GetRootCid(&_PDPVerifier.CallOpts, setId, rootId)
}

// GetRootLeafCount is a free data retrieval call binding the contract method 0x9153e64b.
//
// Solidity: function getRootLeafCount(uint256 setId, uint256 rootId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetRootLeafCount(opts *bind.CallOpts, setId *big.Int, rootId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getRootLeafCount", setId, rootId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRootLeafCount is a free data retrieval call binding the contract method 0x9153e64b.
//
// Solidity: function getRootLeafCount(uint256 setId, uint256 rootId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetRootLeafCount(setId *big.Int, rootId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetRootLeafCount(&_PDPVerifier.CallOpts, setId, rootId)
}

// GetRootLeafCount is a free data retrieval call binding the contract method 0x9153e64b.
//
// Solidity: function getRootLeafCount(uint256 setId, uint256 rootId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetRootLeafCount(setId *big.Int, rootId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetRootLeafCount(&_PDPVerifier.CallOpts, setId, rootId)
}

// GetScheduledRemovals is a free data retrieval call binding the contract method 0x6fa44692.
//
// Solidity: function getScheduledRemovals(uint256 setId) view returns(uint256[])
func (_PDPVerifier *PDPVerifierCaller) GetScheduledRemovals(opts *bind.CallOpts, setId *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getScheduledRemovals", setId)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetScheduledRemovals is a free data retrieval call binding the contract method 0x6fa44692.
//
// Solidity: function getScheduledRemovals(uint256 setId) view returns(uint256[])
func (_PDPVerifier *PDPVerifierSession) GetScheduledRemovals(setId *big.Int) ([]*big.Int, error) {
	return _PDPVerifier.Contract.GetScheduledRemovals(&_PDPVerifier.CallOpts, setId)
}

// GetScheduledRemovals is a free data retrieval call binding the contract method 0x6fa44692.
//
// Solidity: function getScheduledRemovals(uint256 setId) view returns(uint256[])
func (_PDPVerifier *PDPVerifierCallerSession) GetScheduledRemovals(setId *big.Int) ([]*big.Int, error) {
	return _PDPVerifier.Contract.GetScheduledRemovals(&_PDPVerifier.CallOpts, setId)
}

// GetSumTreeCounts is a free data retrieval call binding the contract method 0xcbb147cd.
//
// Solidity: function getSumTreeCounts(uint256 setId, uint256 rootId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) GetSumTreeCounts(opts *bind.CallOpts, setId *big.Int, rootId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "getSumTreeCounts", setId, rootId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSumTreeCounts is a free data retrieval call binding the contract method 0xcbb147cd.
//
// Solidity: function getSumTreeCounts(uint256 setId, uint256 rootId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) GetSumTreeCounts(setId *big.Int, rootId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetSumTreeCounts(&_PDPVerifier.CallOpts, setId, rootId)
}

// GetSumTreeCounts is a free data retrieval call binding the contract method 0xcbb147cd.
//
// Solidity: function getSumTreeCounts(uint256 setId, uint256 rootId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) GetSumTreeCounts(setId *big.Int, rootId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.GetSumTreeCounts(&_PDPVerifier.CallOpts, setId, rootId)
}

// HeightFromIndex is a free data retrieval call binding the contract method 0x86988884.
//
// Solidity: function heightFromIndex(uint256 index) pure returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) HeightFromIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "heightFromIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HeightFromIndex is a free data retrieval call binding the contract method 0x86988884.
//
// Solidity: function heightFromIndex(uint256 index) pure returns(uint256)
func (_PDPVerifier *PDPVerifierSession) HeightFromIndex(index *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.HeightFromIndex(&_PDPVerifier.CallOpts, index)
}

// HeightFromIndex is a free data retrieval call binding the contract method 0x86988884.
//
// Solidity: function heightFromIndex(uint256 index) pure returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) HeightFromIndex(index *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.HeightFromIndex(&_PDPVerifier.CallOpts, index)
}

// HeightOfTree is a free data retrieval call binding the contract method 0x8d101c68.
//
// Solidity: function heightOfTree(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) HeightOfTree(opts *bind.CallOpts, setId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "heightOfTree", setId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HeightOfTree is a free data retrieval call binding the contract method 0x8d101c68.
//
// Solidity: function heightOfTree(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) HeightOfTree(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.HeightOfTree(&_PDPVerifier.CallOpts, setId)
}

// HeightOfTree is a free data retrieval call binding the contract method 0x8d101c68.
//
// Solidity: function heightOfTree(uint256 setId) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) HeightOfTree(setId *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.HeightOfTree(&_PDPVerifier.CallOpts, setId)
}

// MakeRoot is a free data retrieval call binding the contract method 0x831604e1.
//
// Solidity: function makeRoot(bytes32[][] tree, uint256 leafCount) view returns(((bytes),uint256))
func (_PDPVerifier *PDPVerifierCaller) MakeRoot(opts *bind.CallOpts, tree [][][32]byte, leafCount *big.Int) (PDPVerifierRootData, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "makeRoot", tree, leafCount)

	if err != nil {
		return *new(PDPVerifierRootData), err
	}

	out0 := *abi.ConvertType(out[0], new(PDPVerifierRootData)).(*PDPVerifierRootData)

	return out0, err

}

// MakeRoot is a free data retrieval call binding the contract method 0x831604e1.
//
// Solidity: function makeRoot(bytes32[][] tree, uint256 leafCount) view returns(((bytes),uint256))
func (_PDPVerifier *PDPVerifierSession) MakeRoot(tree [][][32]byte, leafCount *big.Int) (PDPVerifierRootData, error) {
	return _PDPVerifier.Contract.MakeRoot(&_PDPVerifier.CallOpts, tree, leafCount)
}

// MakeRoot is a free data retrieval call binding the contract method 0x831604e1.
//
// Solidity: function makeRoot(bytes32[][] tree, uint256 leafCount) view returns(((bytes),uint256))
func (_PDPVerifier *PDPVerifierCallerSession) MakeRoot(tree [][][32]byte, leafCount *big.Int) (PDPVerifierRootData, error) {
	return _PDPVerifier.Contract.MakeRoot(&_PDPVerifier.CallOpts, tree, leafCount)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PDPVerifier *PDPVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PDPVerifier *PDPVerifierSession) Owner() (common.Address, error) {
	return _PDPVerifier.Contract.Owner(&_PDPVerifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PDPVerifier *PDPVerifierCallerSession) Owner() (common.Address, error) {
	return _PDPVerifier.Contract.Owner(&_PDPVerifier.CallOpts)
}

// ProofSetLive is a free data retrieval call binding the contract method 0xf5cac1ba.
//
// Solidity: function proofSetLive(uint256 setId) view returns(bool)
func (_PDPVerifier *PDPVerifierCaller) ProofSetLive(opts *bind.CallOpts, setId *big.Int) (bool, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "proofSetLive", setId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ProofSetLive is a free data retrieval call binding the contract method 0xf5cac1ba.
//
// Solidity: function proofSetLive(uint256 setId) view returns(bool)
func (_PDPVerifier *PDPVerifierSession) ProofSetLive(setId *big.Int) (bool, error) {
	return _PDPVerifier.Contract.ProofSetLive(&_PDPVerifier.CallOpts, setId)
}

// ProofSetLive is a free data retrieval call binding the contract method 0xf5cac1ba.
//
// Solidity: function proofSetLive(uint256 setId) view returns(bool)
func (_PDPVerifier *PDPVerifierCallerSession) ProofSetLive(setId *big.Int) (bool, error) {
	return _PDPVerifier.Contract.ProofSetLive(&_PDPVerifier.CallOpts, setId)
}

// RootChallengable is a free data retrieval call binding the contract method 0x71cf2a16.
//
// Solidity: function rootChallengable(uint256 setId, uint256 rootId) view returns(bool)
func (_PDPVerifier *PDPVerifierCaller) RootChallengable(opts *bind.CallOpts, setId *big.Int, rootId *big.Int) (bool, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "rootChallengable", setId, rootId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RootChallengable is a free data retrieval call binding the contract method 0x71cf2a16.
//
// Solidity: function rootChallengable(uint256 setId, uint256 rootId) view returns(bool)
func (_PDPVerifier *PDPVerifierSession) RootChallengable(setId *big.Int, rootId *big.Int) (bool, error) {
	return _PDPVerifier.Contract.RootChallengable(&_PDPVerifier.CallOpts, setId, rootId)
}

// RootChallengable is a free data retrieval call binding the contract method 0x71cf2a16.
//
// Solidity: function rootChallengable(uint256 setId, uint256 rootId) view returns(bool)
func (_PDPVerifier *PDPVerifierCallerSession) RootChallengable(setId *big.Int, rootId *big.Int) (bool, error) {
	return _PDPVerifier.Contract.RootChallengable(&_PDPVerifier.CallOpts, setId, rootId)
}

// RootLive is a free data retrieval call binding the contract method 0x47331050.
//
// Solidity: function rootLive(uint256 setId, uint256 rootId) view returns(bool)
func (_PDPVerifier *PDPVerifierCaller) RootLive(opts *bind.CallOpts, setId *big.Int, rootId *big.Int) (bool, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "rootLive", setId, rootId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RootLive is a free data retrieval call binding the contract method 0x47331050.
//
// Solidity: function rootLive(uint256 setId, uint256 rootId) view returns(bool)
func (_PDPVerifier *PDPVerifierSession) RootLive(setId *big.Int, rootId *big.Int) (bool, error) {
	return _PDPVerifier.Contract.RootLive(&_PDPVerifier.CallOpts, setId, rootId)
}

// RootLive is a free data retrieval call binding the contract method 0x47331050.
//
// Solidity: function rootLive(uint256 setId, uint256 rootId) view returns(bool)
func (_PDPVerifier *PDPVerifierCallerSession) RootLive(setId *big.Int, rootId *big.Int) (bool, error) {
	return _PDPVerifier.Contract.RootLive(&_PDPVerifier.CallOpts, setId, rootId)
}

// SumTreeCounts is a free data retrieval call binding the contract method 0x9a9a330f.
//
// Solidity: function sumTreeCounts(uint256 , uint256 ) view returns(uint256)
func (_PDPVerifier *PDPVerifierCaller) SumTreeCounts(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PDPVerifier.contract.Call(opts, &out, "sumTreeCounts", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SumTreeCounts is a free data retrieval call binding the contract method 0x9a9a330f.
//
// Solidity: function sumTreeCounts(uint256 , uint256 ) view returns(uint256)
func (_PDPVerifier *PDPVerifierSession) SumTreeCounts(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.SumTreeCounts(&_PDPVerifier.CallOpts, arg0, arg1)
}

// SumTreeCounts is a free data retrieval call binding the contract method 0x9a9a330f.
//
// Solidity: function sumTreeCounts(uint256 , uint256 ) view returns(uint256)
func (_PDPVerifier *PDPVerifierCallerSession) SumTreeCounts(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _PDPVerifier.Contract.SumTreeCounts(&_PDPVerifier.CallOpts, arg0, arg1)
}

// AddRoots is a paid mutator transaction binding the contract method 0x11c0ee4a.
//
// Solidity: function addRoots(uint256 setId, ((bytes),uint256)[] rootData, bytes extraData) returns(uint256)
func (_PDPVerifier *PDPVerifierTransactor) AddRoots(opts *bind.TransactOpts, setId *big.Int, rootData []PDPVerifierRootData, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "addRoots", setId, rootData, extraData)
}

// AddRoots is a paid mutator transaction binding the contract method 0x11c0ee4a.
//
// Solidity: function addRoots(uint256 setId, ((bytes),uint256)[] rootData, bytes extraData) returns(uint256)
func (_PDPVerifier *PDPVerifierSession) AddRoots(setId *big.Int, rootData []PDPVerifierRootData, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.AddRoots(&_PDPVerifier.TransactOpts, setId, rootData, extraData)
}

// AddRoots is a paid mutator transaction binding the contract method 0x11c0ee4a.
//
// Solidity: function addRoots(uint256 setId, ((bytes),uint256)[] rootData, bytes extraData) returns(uint256)
func (_PDPVerifier *PDPVerifierTransactorSession) AddRoots(setId *big.Int, rootData []PDPVerifierRootData, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.AddRoots(&_PDPVerifier.TransactOpts, setId, rootData, extraData)
}

// ClaimProofSetOwnership is a paid mutator transaction binding the contract method 0xee3dac65.
//
// Solidity: function claimProofSetOwnership(uint256 setId) returns()
func (_PDPVerifier *PDPVerifierTransactor) ClaimProofSetOwnership(opts *bind.TransactOpts, setId *big.Int) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "claimProofSetOwnership", setId)
}

// ClaimProofSetOwnership is a paid mutator transaction binding the contract method 0xee3dac65.
//
// Solidity: function claimProofSetOwnership(uint256 setId) returns()
func (_PDPVerifier *PDPVerifierSession) ClaimProofSetOwnership(setId *big.Int) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ClaimProofSetOwnership(&_PDPVerifier.TransactOpts, setId)
}

// ClaimProofSetOwnership is a paid mutator transaction binding the contract method 0xee3dac65.
//
// Solidity: function claimProofSetOwnership(uint256 setId) returns()
func (_PDPVerifier *PDPVerifierTransactorSession) ClaimProofSetOwnership(setId *big.Int) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ClaimProofSetOwnership(&_PDPVerifier.TransactOpts, setId)
}

// CreateProofSet is a paid mutator transaction binding the contract method 0x0a4d7932.
//
// Solidity: function createProofSet(address listenerAddr, bytes extraData) payable returns(uint256)
func (_PDPVerifier *PDPVerifierTransactor) CreateProofSet(opts *bind.TransactOpts, listenerAddr common.Address, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "createProofSet", listenerAddr, extraData)
}

// CreateProofSet is a paid mutator transaction binding the contract method 0x0a4d7932.
//
// Solidity: function createProofSet(address listenerAddr, bytes extraData) payable returns(uint256)
func (_PDPVerifier *PDPVerifierSession) CreateProofSet(listenerAddr common.Address, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.CreateProofSet(&_PDPVerifier.TransactOpts, listenerAddr, extraData)
}

// CreateProofSet is a paid mutator transaction binding the contract method 0x0a4d7932.
//
// Solidity: function createProofSet(address listenerAddr, bytes extraData) payable returns(uint256)
func (_PDPVerifier *PDPVerifierTransactorSession) CreateProofSet(listenerAddr common.Address, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.CreateProofSet(&_PDPVerifier.TransactOpts, listenerAddr, extraData)
}

// DeleteProofSet is a paid mutator transaction binding the contract method 0x847d1d06.
//
// Solidity: function deleteProofSet(uint256 setId, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierTransactor) DeleteProofSet(opts *bind.TransactOpts, setId *big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "deleteProofSet", setId, extraData)
}

// DeleteProofSet is a paid mutator transaction binding the contract method 0x847d1d06.
//
// Solidity: function deleteProofSet(uint256 setId, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierSession) DeleteProofSet(setId *big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.DeleteProofSet(&_PDPVerifier.TransactOpts, setId, extraData)
}

// DeleteProofSet is a paid mutator transaction binding the contract method 0x847d1d06.
//
// Solidity: function deleteProofSet(uint256 setId, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierTransactorSession) DeleteProofSet(setId *big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.DeleteProofSet(&_PDPVerifier.TransactOpts, setId, extraData)
}

// NextProvingPeriod is a paid mutator transaction binding the contract method 0x45c0b92d.
//
// Solidity: function nextProvingPeriod(uint256 setId, uint256 challengeEpoch, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierTransactor) NextProvingPeriod(opts *bind.TransactOpts, setId *big.Int, challengeEpoch *big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "nextProvingPeriod", setId, challengeEpoch, extraData)
}

// NextProvingPeriod is a paid mutator transaction binding the contract method 0x45c0b92d.
//
// Solidity: function nextProvingPeriod(uint256 setId, uint256 challengeEpoch, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierSession) NextProvingPeriod(setId *big.Int, challengeEpoch *big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.NextProvingPeriod(&_PDPVerifier.TransactOpts, setId, challengeEpoch, extraData)
}

// NextProvingPeriod is a paid mutator transaction binding the contract method 0x45c0b92d.
//
// Solidity: function nextProvingPeriod(uint256 setId, uint256 challengeEpoch, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierTransactorSession) NextProvingPeriod(setId *big.Int, challengeEpoch *big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.NextProvingPeriod(&_PDPVerifier.TransactOpts, setId, challengeEpoch, extraData)
}

// ProposeProofSetOwner is a paid mutator transaction binding the contract method 0x6cb55c16.
//
// Solidity: function proposeProofSetOwner(uint256 setId, address newOwner) returns()
func (_PDPVerifier *PDPVerifierTransactor) ProposeProofSetOwner(opts *bind.TransactOpts, setId *big.Int, newOwner common.Address) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "proposeProofSetOwner", setId, newOwner)
}

// ProposeProofSetOwner is a paid mutator transaction binding the contract method 0x6cb55c16.
//
// Solidity: function proposeProofSetOwner(uint256 setId, address newOwner) returns()
func (_PDPVerifier *PDPVerifierSession) ProposeProofSetOwner(setId *big.Int, newOwner common.Address) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ProposeProofSetOwner(&_PDPVerifier.TransactOpts, setId, newOwner)
}

// ProposeProofSetOwner is a paid mutator transaction binding the contract method 0x6cb55c16.
//
// Solidity: function proposeProofSetOwner(uint256 setId, address newOwner) returns()
func (_PDPVerifier *PDPVerifierTransactorSession) ProposeProofSetOwner(setId *big.Int, newOwner common.Address) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ProposeProofSetOwner(&_PDPVerifier.TransactOpts, setId, newOwner)
}

// ProvePossession is a paid mutator transaction binding the contract method 0xf58f952b.
//
// Solidity: function provePossession(uint256 setId, (bytes32,bytes32[])[] proofs) payable returns()
func (_PDPVerifier *PDPVerifierTransactor) ProvePossession(opts *bind.TransactOpts, setId *big.Int, proofs []PDPVerifierProof) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "provePossession", setId, proofs)
}

// ProvePossession is a paid mutator transaction binding the contract method 0xf58f952b.
//
// Solidity: function provePossession(uint256 setId, (bytes32,bytes32[])[] proofs) payable returns()
func (_PDPVerifier *PDPVerifierSession) ProvePossession(setId *big.Int, proofs []PDPVerifierProof) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ProvePossession(&_PDPVerifier.TransactOpts, setId, proofs)
}

// ProvePossession is a paid mutator transaction binding the contract method 0xf58f952b.
//
// Solidity: function provePossession(uint256 setId, (bytes32,bytes32[])[] proofs) payable returns()
func (_PDPVerifier *PDPVerifierTransactorSession) ProvePossession(setId *big.Int, proofs []PDPVerifierProof) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ProvePossession(&_PDPVerifier.TransactOpts, setId, proofs)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PDPVerifier *PDPVerifierTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PDPVerifier *PDPVerifierSession) RenounceOwnership() (*types.Transaction, error) {
	return _PDPVerifier.Contract.RenounceOwnership(&_PDPVerifier.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PDPVerifier *PDPVerifierTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PDPVerifier.Contract.RenounceOwnership(&_PDPVerifier.TransactOpts)
}

// ScheduleRemovals is a paid mutator transaction binding the contract method 0x3b68e4e9.
//
// Solidity: function scheduleRemovals(uint256 setId, uint256[] rootIds, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierTransactor) ScheduleRemovals(opts *bind.TransactOpts, setId *big.Int, rootIds []*big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "scheduleRemovals", setId, rootIds, extraData)
}

// ScheduleRemovals is a paid mutator transaction binding the contract method 0x3b68e4e9.
//
// Solidity: function scheduleRemovals(uint256 setId, uint256[] rootIds, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierSession) ScheduleRemovals(setId *big.Int, rootIds []*big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ScheduleRemovals(&_PDPVerifier.TransactOpts, setId, rootIds, extraData)
}

// ScheduleRemovals is a paid mutator transaction binding the contract method 0x3b68e4e9.
//
// Solidity: function scheduleRemovals(uint256 setId, uint256[] rootIds, bytes extraData) returns()
func (_PDPVerifier *PDPVerifierTransactorSession) ScheduleRemovals(setId *big.Int, rootIds []*big.Int, extraData []byte) (*types.Transaction, error) {
	return _PDPVerifier.Contract.ScheduleRemovals(&_PDPVerifier.TransactOpts, setId, rootIds, extraData)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PDPVerifier *PDPVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PDPVerifier.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PDPVerifier *PDPVerifierSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PDPVerifier.Contract.TransferOwnership(&_PDPVerifier.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PDPVerifier *PDPVerifierTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PDPVerifier.Contract.TransferOwnership(&_PDPVerifier.TransactOpts, newOwner)
}

// PDPVerifierDebugIterator is returned from FilterDebug and is used to iterate over the raw logs and unpacked data for Debug events raised by the PDPVerifier contract.
type PDPVerifierDebugIterator struct {
	Event *PDPVerifierDebug // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierDebugIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierDebug)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierDebug)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierDebugIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierDebugIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierDebug represents a Debug event raised by the PDPVerifier contract.
type PDPVerifierDebug struct {
	Message string
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDebug is a free log retrieval operation binding the contract event 0x3c5ad147104e56be34a9176a6692f7df8d2f4b29a5af06bc6b98970d329d6577.
//
// Solidity: event Debug(string message, uint256 value)
func (_PDPVerifier *PDPVerifierFilterer) FilterDebug(opts *bind.FilterOpts) (*PDPVerifierDebugIterator, error) {

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return &PDPVerifierDebugIterator{contract: _PDPVerifier.contract, event: "Debug", logs: logs, sub: sub}, nil
}

// WatchDebug is a free log subscription operation binding the contract event 0x3c5ad147104e56be34a9176a6692f7df8d2f4b29a5af06bc6b98970d329d6577.
//
// Solidity: event Debug(string message, uint256 value)
func (_PDPVerifier *PDPVerifierFilterer) WatchDebug(opts *bind.WatchOpts, sink chan<- *PDPVerifierDebug) (event.Subscription, error) {

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierDebug)
				if err := _PDPVerifier.contract.UnpackLog(event, "Debug", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDebug is a log parse operation binding the contract event 0x3c5ad147104e56be34a9176a6692f7df8d2f4b29a5af06bc6b98970d329d6577.
//
// Solidity: event Debug(string message, uint256 value)
func (_PDPVerifier *PDPVerifierFilterer) ParseDebug(log types.Log) (*PDPVerifierDebug, error) {
	event := new(PDPVerifierDebug)
	if err := _PDPVerifier.contract.UnpackLog(event, "Debug", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierNextProvingPeriodIterator is returned from FilterNextProvingPeriod and is used to iterate over the raw logs and unpacked data for NextProvingPeriod events raised by the PDPVerifier contract.
type PDPVerifierNextProvingPeriodIterator struct {
	Event *PDPVerifierNextProvingPeriod // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierNextProvingPeriodIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierNextProvingPeriod)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierNextProvingPeriod)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierNextProvingPeriodIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierNextProvingPeriodIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierNextProvingPeriod represents a NextProvingPeriod event raised by the PDPVerifier contract.
type PDPVerifierNextProvingPeriod struct {
	SetId          *big.Int
	ChallengeEpoch *big.Int
	LeafCount      *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNextProvingPeriod is a free log retrieval operation binding the contract event 0xc099ffec4e3e773644a4d1dda368c46af853a0eeb15babde217f53a657396e1e.
//
// Solidity: event NextProvingPeriod(uint256 indexed setId, uint256 challengeEpoch, uint256 leafCount)
func (_PDPVerifier *PDPVerifierFilterer) FilterNextProvingPeriod(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierNextProvingPeriodIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "NextProvingPeriod", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierNextProvingPeriodIterator{contract: _PDPVerifier.contract, event: "NextProvingPeriod", logs: logs, sub: sub}, nil
}

// WatchNextProvingPeriod is a free log subscription operation binding the contract event 0xc099ffec4e3e773644a4d1dda368c46af853a0eeb15babde217f53a657396e1e.
//
// Solidity: event NextProvingPeriod(uint256 indexed setId, uint256 challengeEpoch, uint256 leafCount)
func (_PDPVerifier *PDPVerifierFilterer) WatchNextProvingPeriod(opts *bind.WatchOpts, sink chan<- *PDPVerifierNextProvingPeriod, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "NextProvingPeriod", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierNextProvingPeriod)
				if err := _PDPVerifier.contract.UnpackLog(event, "NextProvingPeriod", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNextProvingPeriod is a log parse operation binding the contract event 0xc099ffec4e3e773644a4d1dda368c46af853a0eeb15babde217f53a657396e1e.
//
// Solidity: event NextProvingPeriod(uint256 indexed setId, uint256 challengeEpoch, uint256 leafCount)
func (_PDPVerifier *PDPVerifierFilterer) ParseNextProvingPeriod(log types.Log) (*PDPVerifierNextProvingPeriod, error) {
	event := new(PDPVerifierNextProvingPeriod)
	if err := _PDPVerifier.contract.UnpackLog(event, "NextProvingPeriod", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PDPVerifier contract.
type PDPVerifierOwnershipTransferredIterator struct {
	Event *PDPVerifierOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierOwnershipTransferred represents a OwnershipTransferred event raised by the PDPVerifier contract.
type PDPVerifierOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PDPVerifier *PDPVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PDPVerifierOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierOwnershipTransferredIterator{contract: _PDPVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PDPVerifier *PDPVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PDPVerifierOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierOwnershipTransferred)
				if err := _PDPVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PDPVerifier *PDPVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*PDPVerifierOwnershipTransferred, error) {
	event := new(PDPVerifierOwnershipTransferred)
	if err := _PDPVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierPossessionProvenIterator is returned from FilterPossessionProven and is used to iterate over the raw logs and unpacked data for PossessionProven events raised by the PDPVerifier contract.
type PDPVerifierPossessionProvenIterator struct {
	Event *PDPVerifierPossessionProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierPossessionProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierPossessionProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierPossessionProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierPossessionProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierPossessionProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierPossessionProven represents a PossessionProven event raised by the PDPVerifier contract.
type PDPVerifierPossessionProven struct {
	SetId      *big.Int
	Challenges []PDPVerifierRootIdAndOffset
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPossessionProven is a free log retrieval operation binding the contract event 0x1acf7df9f0c1b0208c23be6178950c0273f89b766805a2c0bd1e53d25c700e50.
//
// Solidity: event PossessionProven(uint256 indexed setId, (uint256,uint256)[] challenges)
func (_PDPVerifier *PDPVerifierFilterer) FilterPossessionProven(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierPossessionProvenIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "PossessionProven", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierPossessionProvenIterator{contract: _PDPVerifier.contract, event: "PossessionProven", logs: logs, sub: sub}, nil
}

// WatchPossessionProven is a free log subscription operation binding the contract event 0x1acf7df9f0c1b0208c23be6178950c0273f89b766805a2c0bd1e53d25c700e50.
//
// Solidity: event PossessionProven(uint256 indexed setId, (uint256,uint256)[] challenges)
func (_PDPVerifier *PDPVerifierFilterer) WatchPossessionProven(opts *bind.WatchOpts, sink chan<- *PDPVerifierPossessionProven, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "PossessionProven", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierPossessionProven)
				if err := _PDPVerifier.contract.UnpackLog(event, "PossessionProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePossessionProven is a log parse operation binding the contract event 0x1acf7df9f0c1b0208c23be6178950c0273f89b766805a2c0bd1e53d25c700e50.
//
// Solidity: event PossessionProven(uint256 indexed setId, (uint256,uint256)[] challenges)
func (_PDPVerifier *PDPVerifierFilterer) ParsePossessionProven(log types.Log) (*PDPVerifierPossessionProven, error) {
	event := new(PDPVerifierPossessionProven)
	if err := _PDPVerifier.contract.UnpackLog(event, "PossessionProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierProofFeePaidIterator is returned from FilterProofFeePaid and is used to iterate over the raw logs and unpacked data for ProofFeePaid events raised by the PDPVerifier contract.
type PDPVerifierProofFeePaidIterator struct {
	Event *PDPVerifierProofFeePaid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierProofFeePaidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierProofFeePaid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierProofFeePaid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierProofFeePaidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierProofFeePaidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierProofFeePaid represents a ProofFeePaid event raised by the PDPVerifier contract.
type PDPVerifierProofFeePaid struct {
	SetId *big.Int
	Fee   *big.Int
	Price uint64
	Expo  int32
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterProofFeePaid is a free log retrieval operation binding the contract event 0x928bbf5188022bf8b9a0e59f5e81e179d0a4c729bdba2856ac971af2063fbf2b.
//
// Solidity: event ProofFeePaid(uint256 indexed setId, uint256 fee, uint64 price, int32 expo)
func (_PDPVerifier *PDPVerifierFilterer) FilterProofFeePaid(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierProofFeePaidIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "ProofFeePaid", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierProofFeePaidIterator{contract: _PDPVerifier.contract, event: "ProofFeePaid", logs: logs, sub: sub}, nil
}

// WatchProofFeePaid is a free log subscription operation binding the contract event 0x928bbf5188022bf8b9a0e59f5e81e179d0a4c729bdba2856ac971af2063fbf2b.
//
// Solidity: event ProofFeePaid(uint256 indexed setId, uint256 fee, uint64 price, int32 expo)
func (_PDPVerifier *PDPVerifierFilterer) WatchProofFeePaid(opts *bind.WatchOpts, sink chan<- *PDPVerifierProofFeePaid, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "ProofFeePaid", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierProofFeePaid)
				if err := _PDPVerifier.contract.UnpackLog(event, "ProofFeePaid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofFeePaid is a log parse operation binding the contract event 0x928bbf5188022bf8b9a0e59f5e81e179d0a4c729bdba2856ac971af2063fbf2b.
//
// Solidity: event ProofFeePaid(uint256 indexed setId, uint256 fee, uint64 price, int32 expo)
func (_PDPVerifier *PDPVerifierFilterer) ParseProofFeePaid(log types.Log) (*PDPVerifierProofFeePaid, error) {
	event := new(PDPVerifierProofFeePaid)
	if err := _PDPVerifier.contract.UnpackLog(event, "ProofFeePaid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierProofSetCreatedIterator is returned from FilterProofSetCreated and is used to iterate over the raw logs and unpacked data for ProofSetCreated events raised by the PDPVerifier contract.
type PDPVerifierProofSetCreatedIterator struct {
	Event *PDPVerifierProofSetCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierProofSetCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierProofSetCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierProofSetCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierProofSetCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierProofSetCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierProofSetCreated represents a ProofSetCreated event raised by the PDPVerifier contract.
type PDPVerifierProofSetCreated struct {
	SetId *big.Int
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterProofSetCreated is a free log retrieval operation binding the contract event 0x017f0b33d96e8f9968590172013032c2346cf047787a5e17a44b0a1bb3cd0f01.
//
// Solidity: event ProofSetCreated(uint256 indexed setId, address indexed owner)
func (_PDPVerifier *PDPVerifierFilterer) FilterProofSetCreated(opts *bind.FilterOpts, setId []*big.Int, owner []common.Address) (*PDPVerifierProofSetCreatedIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "ProofSetCreated", setIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierProofSetCreatedIterator{contract: _PDPVerifier.contract, event: "ProofSetCreated", logs: logs, sub: sub}, nil
}

// WatchProofSetCreated is a free log subscription operation binding the contract event 0x017f0b33d96e8f9968590172013032c2346cf047787a5e17a44b0a1bb3cd0f01.
//
// Solidity: event ProofSetCreated(uint256 indexed setId, address indexed owner)
func (_PDPVerifier *PDPVerifierFilterer) WatchProofSetCreated(opts *bind.WatchOpts, sink chan<- *PDPVerifierProofSetCreated, setId []*big.Int, owner []common.Address) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "ProofSetCreated", setIdRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierProofSetCreated)
				if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofSetCreated is a log parse operation binding the contract event 0x017f0b33d96e8f9968590172013032c2346cf047787a5e17a44b0a1bb3cd0f01.
//
// Solidity: event ProofSetCreated(uint256 indexed setId, address indexed owner)
func (_PDPVerifier *PDPVerifierFilterer) ParseProofSetCreated(log types.Log) (*PDPVerifierProofSetCreated, error) {
	event := new(PDPVerifierProofSetCreated)
	if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierProofSetDeletedIterator is returned from FilterProofSetDeleted and is used to iterate over the raw logs and unpacked data for ProofSetDeleted events raised by the PDPVerifier contract.
type PDPVerifierProofSetDeletedIterator struct {
	Event *PDPVerifierProofSetDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierProofSetDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierProofSetDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierProofSetDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierProofSetDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierProofSetDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierProofSetDeleted represents a ProofSetDeleted event raised by the PDPVerifier contract.
type PDPVerifierProofSetDeleted struct {
	SetId            *big.Int
	DeletedLeafCount *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterProofSetDeleted is a free log retrieval operation binding the contract event 0x589e9a441b5bddda77c4ab647b0108764a9cc1a7f655aa9b7bc50b8bdfab8673.
//
// Solidity: event ProofSetDeleted(uint256 indexed setId, uint256 deletedLeafCount)
func (_PDPVerifier *PDPVerifierFilterer) FilterProofSetDeleted(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierProofSetDeletedIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "ProofSetDeleted", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierProofSetDeletedIterator{contract: _PDPVerifier.contract, event: "ProofSetDeleted", logs: logs, sub: sub}, nil
}

// WatchProofSetDeleted is a free log subscription operation binding the contract event 0x589e9a441b5bddda77c4ab647b0108764a9cc1a7f655aa9b7bc50b8bdfab8673.
//
// Solidity: event ProofSetDeleted(uint256 indexed setId, uint256 deletedLeafCount)
func (_PDPVerifier *PDPVerifierFilterer) WatchProofSetDeleted(opts *bind.WatchOpts, sink chan<- *PDPVerifierProofSetDeleted, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "ProofSetDeleted", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierProofSetDeleted)
				if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofSetDeleted is a log parse operation binding the contract event 0x589e9a441b5bddda77c4ab647b0108764a9cc1a7f655aa9b7bc50b8bdfab8673.
//
// Solidity: event ProofSetDeleted(uint256 indexed setId, uint256 deletedLeafCount)
func (_PDPVerifier *PDPVerifierFilterer) ParseProofSetDeleted(log types.Log) (*PDPVerifierProofSetDeleted, error) {
	event := new(PDPVerifierProofSetDeleted)
	if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierProofSetEmptyIterator is returned from FilterProofSetEmpty and is used to iterate over the raw logs and unpacked data for ProofSetEmpty events raised by the PDPVerifier contract.
type PDPVerifierProofSetEmptyIterator struct {
	Event *PDPVerifierProofSetEmpty // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierProofSetEmptyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierProofSetEmpty)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierProofSetEmpty)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierProofSetEmptyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierProofSetEmptyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierProofSetEmpty represents a ProofSetEmpty event raised by the PDPVerifier contract.
type PDPVerifierProofSetEmpty struct {
	SetId *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterProofSetEmpty is a free log retrieval operation binding the contract event 0x323c29bc8d678a5d987b90a321982d10b9a91bcad071a9e445879497bf0e68e7.
//
// Solidity: event ProofSetEmpty(uint256 indexed setId)
func (_PDPVerifier *PDPVerifierFilterer) FilterProofSetEmpty(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierProofSetEmptyIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "ProofSetEmpty", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierProofSetEmptyIterator{contract: _PDPVerifier.contract, event: "ProofSetEmpty", logs: logs, sub: sub}, nil
}

// WatchProofSetEmpty is a free log subscription operation binding the contract event 0x323c29bc8d678a5d987b90a321982d10b9a91bcad071a9e445879497bf0e68e7.
//
// Solidity: event ProofSetEmpty(uint256 indexed setId)
func (_PDPVerifier *PDPVerifierFilterer) WatchProofSetEmpty(opts *bind.WatchOpts, sink chan<- *PDPVerifierProofSetEmpty, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "ProofSetEmpty", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierProofSetEmpty)
				if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetEmpty", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofSetEmpty is a log parse operation binding the contract event 0x323c29bc8d678a5d987b90a321982d10b9a91bcad071a9e445879497bf0e68e7.
//
// Solidity: event ProofSetEmpty(uint256 indexed setId)
func (_PDPVerifier *PDPVerifierFilterer) ParseProofSetEmpty(log types.Log) (*PDPVerifierProofSetEmpty, error) {
	event := new(PDPVerifierProofSetEmpty)
	if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetEmpty", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierProofSetOwnerChangedIterator is returned from FilterProofSetOwnerChanged and is used to iterate over the raw logs and unpacked data for ProofSetOwnerChanged events raised by the PDPVerifier contract.
type PDPVerifierProofSetOwnerChangedIterator struct {
	Event *PDPVerifierProofSetOwnerChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierProofSetOwnerChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierProofSetOwnerChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierProofSetOwnerChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierProofSetOwnerChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierProofSetOwnerChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierProofSetOwnerChanged represents a ProofSetOwnerChanged event raised by the PDPVerifier contract.
type PDPVerifierProofSetOwnerChanged struct {
	SetId    *big.Int
	OldOwner common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterProofSetOwnerChanged is a free log retrieval operation binding the contract event 0xd3273037b635678293ef0c076bd77af13760e75e12806d1db237616d03c3a766.
//
// Solidity: event ProofSetOwnerChanged(uint256 indexed setId, address indexed oldOwner, address indexed newOwner)
func (_PDPVerifier *PDPVerifierFilterer) FilterProofSetOwnerChanged(opts *bind.FilterOpts, setId []*big.Int, oldOwner []common.Address, newOwner []common.Address) (*PDPVerifierProofSetOwnerChangedIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}
	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "ProofSetOwnerChanged", setIdRule, oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierProofSetOwnerChangedIterator{contract: _PDPVerifier.contract, event: "ProofSetOwnerChanged", logs: logs, sub: sub}, nil
}

// WatchProofSetOwnerChanged is a free log subscription operation binding the contract event 0xd3273037b635678293ef0c076bd77af13760e75e12806d1db237616d03c3a766.
//
// Solidity: event ProofSetOwnerChanged(uint256 indexed setId, address indexed oldOwner, address indexed newOwner)
func (_PDPVerifier *PDPVerifierFilterer) WatchProofSetOwnerChanged(opts *bind.WatchOpts, sink chan<- *PDPVerifierProofSetOwnerChanged, setId []*big.Int, oldOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}
	var oldOwnerRule []interface{}
	for _, oldOwnerItem := range oldOwner {
		oldOwnerRule = append(oldOwnerRule, oldOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "ProofSetOwnerChanged", setIdRule, oldOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierProofSetOwnerChanged)
				if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetOwnerChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProofSetOwnerChanged is a log parse operation binding the contract event 0xd3273037b635678293ef0c076bd77af13760e75e12806d1db237616d03c3a766.
//
// Solidity: event ProofSetOwnerChanged(uint256 indexed setId, address indexed oldOwner, address indexed newOwner)
func (_PDPVerifier *PDPVerifierFilterer) ParseProofSetOwnerChanged(log types.Log) (*PDPVerifierProofSetOwnerChanged, error) {
	event := new(PDPVerifierProofSetOwnerChanged)
	if err := _PDPVerifier.contract.UnpackLog(event, "ProofSetOwnerChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierRootsAddedIterator is returned from FilterRootsAdded and is used to iterate over the raw logs and unpacked data for RootsAdded events raised by the PDPVerifier contract.
type PDPVerifierRootsAddedIterator struct {
	Event *PDPVerifierRootsAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierRootsAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierRootsAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierRootsAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierRootsAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierRootsAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierRootsAdded represents a RootsAdded event raised by the PDPVerifier contract.
type PDPVerifierRootsAdded struct {
	SetId   *big.Int
	RootIds []*big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRootsAdded is a free log retrieval operation binding the contract event 0x5ce51a8003915c377679ba533d9dafa0792058b254965697e674272f13f4fdd3.
//
// Solidity: event RootsAdded(uint256 indexed setId, uint256[] rootIds)
func (_PDPVerifier *PDPVerifierFilterer) FilterRootsAdded(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierRootsAddedIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "RootsAdded", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierRootsAddedIterator{contract: _PDPVerifier.contract, event: "RootsAdded", logs: logs, sub: sub}, nil
}

// WatchRootsAdded is a free log subscription operation binding the contract event 0x5ce51a8003915c377679ba533d9dafa0792058b254965697e674272f13f4fdd3.
//
// Solidity: event RootsAdded(uint256 indexed setId, uint256[] rootIds)
func (_PDPVerifier *PDPVerifierFilterer) WatchRootsAdded(opts *bind.WatchOpts, sink chan<- *PDPVerifierRootsAdded, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "RootsAdded", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierRootsAdded)
				if err := _PDPVerifier.contract.UnpackLog(event, "RootsAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRootsAdded is a log parse operation binding the contract event 0x5ce51a8003915c377679ba533d9dafa0792058b254965697e674272f13f4fdd3.
//
// Solidity: event RootsAdded(uint256 indexed setId, uint256[] rootIds)
func (_PDPVerifier *PDPVerifierFilterer) ParseRootsAdded(log types.Log) (*PDPVerifierRootsAdded, error) {
	event := new(PDPVerifierRootsAdded)
	if err := _PDPVerifier.contract.UnpackLog(event, "RootsAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PDPVerifierRootsRemovedIterator is returned from FilterRootsRemoved and is used to iterate over the raw logs and unpacked data for RootsRemoved events raised by the PDPVerifier contract.
type PDPVerifierRootsRemovedIterator struct {
	Event *PDPVerifierRootsRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PDPVerifierRootsRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PDPVerifierRootsRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PDPVerifierRootsRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PDPVerifierRootsRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PDPVerifierRootsRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PDPVerifierRootsRemoved represents a RootsRemoved event raised by the PDPVerifier contract.
type PDPVerifierRootsRemoved struct {
	SetId   *big.Int
	RootIds []*big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRootsRemoved is a free log retrieval operation binding the contract event 0xd22bb0ee05b8ca92312459c76223d3b9bc1bd96fb6c9b18e637ededf92d81174.
//
// Solidity: event RootsRemoved(uint256 indexed setId, uint256[] rootIds)
func (_PDPVerifier *PDPVerifierFilterer) FilterRootsRemoved(opts *bind.FilterOpts, setId []*big.Int) (*PDPVerifierRootsRemovedIterator, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.FilterLogs(opts, "RootsRemoved", setIdRule)
	if err != nil {
		return nil, err
	}
	return &PDPVerifierRootsRemovedIterator{contract: _PDPVerifier.contract, event: "RootsRemoved", logs: logs, sub: sub}, nil
}

// WatchRootsRemoved is a free log subscription operation binding the contract event 0xd22bb0ee05b8ca92312459c76223d3b9bc1bd96fb6c9b18e637ededf92d81174.
//
// Solidity: event RootsRemoved(uint256 indexed setId, uint256[] rootIds)
func (_PDPVerifier *PDPVerifierFilterer) WatchRootsRemoved(opts *bind.WatchOpts, sink chan<- *PDPVerifierRootsRemoved, setId []*big.Int) (event.Subscription, error) {

	var setIdRule []interface{}
	for _, setIdItem := range setId {
		setIdRule = append(setIdRule, setIdItem)
	}

	logs, sub, err := _PDPVerifier.contract.WatchLogs(opts, "RootsRemoved", setIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PDPVerifierRootsRemoved)
				if err := _PDPVerifier.contract.UnpackLog(event, "RootsRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRootsRemoved is a log parse operation binding the contract event 0xd22bb0ee05b8ca92312459c76223d3b9bc1bd96fb6c9b18e637ededf92d81174.
//
// Solidity: event RootsRemoved(uint256 indexed setId, uint256[] rootIds)
func (_PDPVerifier *PDPVerifierFilterer) ParseRootsRemoved(log types.Log) (*PDPVerifierRootsRemoved, error) {
	event := new(PDPVerifierRootsRemoved)
	if err := _PDPVerifier.contract.UnpackLog(event, "RootsRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
